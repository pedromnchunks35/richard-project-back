// Code generated by MockGen. DO NOT EDIT.
// Source: C:/CodingTest/richard-project-back/repositories/ModelsRepository.go
//
// Generated by this command:
//
//	mockgen -source=C:/CodingTest/richard-project-back/repositories/ModelsRepository.go -destination=C:/CodingTest/richard-project-back/mocks/ModelsRepositoryMock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

		gomock "github.com/golang/mock/gomock"
)

// MockProductRepositoy is a mock of ProductRepositoy interface.
type MockProductRepositoy struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoyMockRecorder
	isgomock struct{}
}

// MockProductRepositoyMockRecorder is the mock recorder for MockProductRepositoy.
type MockProductRepositoyMockRecorder struct {
	mock *MockProductRepositoy
}

// NewMockProductRepositoy creates a new mock instance.
func NewMockProductRepositoy(ctrl *gomock.Controller) *MockProductRepositoy {
	mock := &MockProductRepositoy{ctrl: ctrl}
	mock.recorder = &MockProductRepositoyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepositoy) EXPECT() *MockProductRepositoyMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockProductRepositoy) GetProduct() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductRepositoyMockRecorder) GetProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductRepositoy)(nil).GetProduct))
}

// InsertProduct mocks base method.
func (m *MockProductRepositoy) InsertProduct() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockProductRepositoyMockRecorder) InsertProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductRepositoy)(nil).InsertProduct))
}

// RemoveProduct mocks base method.
func (m *MockProductRepositoy) RemoveProduct() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockProductRepositoyMockRecorder) RemoveProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockProductRepositoy)(nil).RemoveProduct))
}

// Test mocks base method.
func (m *MockProductRepositoy) Test() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Test")
	ret0, _ := ret[0].(string)
	return ret0
}

// Test indicates an expected call of Test.
func (mr *MockProductRepositoyMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockProductRepositoy)(nil).Test))
}

// UpdateProduct mocks base method.
func (m *MockProductRepositoy) UpdateProduct() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct")
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoyMockRecorder) UpdateProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepositoy)(nil).UpdateProduct))
}

// MockImageRepositoy is a mock of ImageRepositoy interface.
type MockImageRepositoy struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoyMockRecorder
	isgomock struct{}
}

// MockImageRepositoyMockRecorder is the mock recorder for MockImageRepositoy.
type MockImageRepositoyMockRecorder struct {
	mock *MockImageRepositoy
}

// NewMockImageRepositoy creates a new mock instance.
func NewMockImageRepositoy(ctrl *gomock.Controller) *MockImageRepositoy {
	mock := &MockImageRepositoy{ctrl: ctrl}
	mock.recorder = &MockImageRepositoyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepositoy) EXPECT() *MockImageRepositoyMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockImageRepositoy) GetImage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageRepositoyMockRecorder) GetImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageRepositoy)(nil).GetImage))
}

// MockFormRepository is a mock of FormRepository interface.
type MockFormRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFormRepositoryMockRecorder
	isgomock struct{}
}

// MockFormRepositoryMockRecorder is the mock recorder for MockFormRepository.
type MockFormRepositoryMockRecorder struct {
	mock *MockFormRepository
}

// NewMockFormRepository creates a new mock instance.
func NewMockFormRepository(ctrl *gomock.Controller) *MockFormRepository {
	mock := &MockFormRepository{ctrl: ctrl}
	mock.recorder = &MockFormRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormRepository) EXPECT() *MockFormRepositoryMockRecorder {
	return m.recorder
}
